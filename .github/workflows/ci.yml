name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - main

permissions:
  contents: read
  pull-requests: write
  issues: write


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker Images
        run: docker compose build

  static_analysis:
    needs: build
    outputs:
      backend_flake8_errors: ${{ steps.backend_flake8.outputs.backend_flake8_errors }}
      backend_flake8_warnings: ${{ steps.backend_flake8.outputs.backend_flake8_warnings }}
      frontend_flake8_errors: ${{ steps.frontend_flake8.outputs.frontend_flake8_errors }}
      frontend_flake8_warnings: ${{ steps.frontend_flake8.outputs.frontend_flake8_warnings }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Use Python 3.9 as per Dockerfiles
      - name: Install Backend Dependencies
        run: pip install -r backend/requirements.txt
      - name: Run Backend Static Analysis (Flake8) and Capture Results
        id: backend_flake8
        run: |
          set -x
          pip install flake8
          FLAKE8_OUTPUT=$(flake8 backend/ --config=backend/.flake8 --exit-zero || true) # Added || true
          echo "$FLAKE8_OUTPUT"
          ERRORS=$(echo "$FLAKE8_OUTPUT" | grep -c 'E[0-9]{3}' || true)
          WARNINGS=$(echo "$FLAKE8_OUTPUT" | grep -c 'W[0-9]{3}' || true)
          echo "backend_flake8_errors=${ERRORS}" >> $GITHUB_OUTPUT
          echo "backend_flake8_warnings=${WARNINGS}" >> $GITHUB_OUTPUT
      - name: Install Frontend Dependencies
        run: pip install -r frontend/requirements.txt
      - name: Run Frontend Static Analysis (Flake8) and Capture Results
        id: frontend_flake8
        run: |
          set -x
          pip install flake8
          FLAKE8_OUTPUT=$(flake8 frontend --config=frontend/.flake8 --exit-zero || true) # Added || true
          echo "$FLAKE8_OUTPUT"
          ERRORS=$(echo "$FLAKE8_OUTPUT" | grep -c 'E[0-9]{3}' || true)
          WARNINGS=$(echo "$FLAKE8_OUTPUT" | grep -c 'W[0-9]{3}' || true)
          echo "frontend_flake8_errors=${ERRORS}" >> $GITHUB_OUTPUT
          echo "frontend_flake8_warnings=${WARNINGS}" >> $GITHUB_OUTPUT
      - name: Run Django System Checks
        run: python frontend/manage.py check

  dependency_scan:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      backend_safety_summary: ${{ steps.backend_safety.outputs.backend_safety_summary }}
      frontend_safety_summary: ${{ steps.frontend_safety.outputs.frontend_safety_summary }}

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Install Safety
        run: pip install safety jq

      - name: Run Frontend Dependency Scan and Capture Results
        id: frontend_safety
        run: |
          SAFETY_OUTPUT=$(safety check -r frontend/requirements.txt --output json 2>&1 \
            | grep -v -E "(DEPRECATED|this command|We highly encourage)" \
            | sed -n '/^{/,/^}$/p' \
            | jq -c '(.vulnerabilities // []) as $vulns
                      | reduce ["CRITICAL","HIGH","MEDIUM"][] as $sev ({}; . + { ($sev): ( [$vulns[] | select(.severity == $sev)] | length ) })'|tr -d '{}"')

          echo $SAFETY_OUTPUT
          echo "frontend_safety_summary=${SAFETY_OUTPUT}" >> $GITHUB_OUTPUT

      - name: Run Backend Dependency Scan and Capture Results
        id: backend_safety
        run: |
          SAFETY_OUTPUT=$(safety check -r backend/requirements.txt --output json 2>&1 \
            | grep -v -E "(DEPRECATED|this command|We highly encourage)" \
            | sed -n '/^{/,/^}$/p' \
            | jq -c '(.vulnerabilities // []) as $vulns
                      | reduce ["CRITICAL","HIGH","MEDIUM"][] as $sev ({}; . + { ($sev): ( [$vulns[] | select(.severity == $sev)] | length ) })'|tr -d '{}"')
            echo $SAFETY_OUTPUT
            echo "backend_safety_summary=${SAFETY_OUTPUT}" >> $GITHUB_OUTPUT

  container_scan:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      parse_backend_trivy_critical: ${{ steps.parse_backend_trivy.outputs.critical }}
      parse_backend_trivy_high: ${{ steps.parse_backend_trivy.outputs.high }}
      parse_backend_trivy_medium: ${{ steps.parse_backend_trivy.outputs.medium }}
      parse_frontend_trivy_critical: ${{ steps.parse_frontend_trivy.outputs.critical }}
      parse_frontend_trivy_high: ${{ steps.parse_frontend_trivy.outputs.high }}
      parse_frontend_trivy_medium: ${{ steps.parse_frontend_trivy.outputs.medium }}

    steps:
      - uses: actions/checkout@v4
      - name: Build Backend Docker Image
        run: docker build -t social-backend:latest ./backend
      - name: Build Frontend Docker Image
        run: docker build -t social-frontend:latest ./frontend
      - name: List Docker Images
        run: docker images
      - name: Run Trivy Scan on Backend Image and Capture Results
        id: backend_trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'social-backend:latest'
          format: 'json'
          exit-code: '1'
          severity: 'CRITICAL'
          ignore-unfixed: true
          output: 'trivy-backend-results.json'
      - name: Parse Backend Trivy Results
        id: parse_backend_trivy
        run: |
          CRITICAL=$(jq '.Results[].Vulnerabilities[] | select(.Severity == "CRITICAL")' trivy-backend-results.json | wc -l)
          HIGH=$(jq '.Results[].Vulnerabilities[] | select(.Severity == "HIGH")' trivy-backend-results.json | wc -l)
          MEDIUM=$(jq '.Results[].Vulnerabilities[] | select(.Severity == "MEDIUM")' trivy-backend-results.json | wc -l)
          echo "critical=${CRITICAL}" >> $GITHUB_OUTPUT
          echo "high=${HIGH}" >> $GITHUB_OUTPUT
          echo "medium=${MEDIUM}" >> $GITHUB_OUTPUT
      - name: Run Trivy Scan on Frontend Image and Capture Results
        id: frontend_trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'social-frontend:latest'
          format: 'json'
          exit-code: '1'
          severity: 'CRITICAL'
          ignore-unfixed: true
          output: 'trivy-frontend-results.json'
      - name: Parse Frontend Trivy Results
        id: parse_frontend_trivy
        run: |
          CRITICAL=$(jq '.Results[].Vulnerabilities[] | select(.Severity == "CRITICAL")' trivy-frontend-results.json | wc -l)
          HIGH=$(jq '.Results[].Vulnerabilities[] | select(.Severity == "HIGH")' trivy-frontend-results.json | wc -l)
          MEDIUM=$(jq '.Results[].Vulnerabilities[] | select(.Severity == "MEDIUM")' trivy-frontend-results.json | wc -l)
          echo "critical=${CRITICAL}" >> $GITHUB_OUTPUT
          echo "high=${HIGH}" >> $GITHUB_OUTPUT
          echo "medium=${MEDIUM}" >> $GITHUB_OUTPUT

  shakedown_test:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      summary: ${{ steps.shakedown_results.outputs.summary }}
    steps:
      - uses: actions/checkout@v4
      - name: Create docker-compose wrapper
        run: |
          mkdir -p /tmp/bin
          echo '#!/bin/bash' > /tmp/bin/docker-compose
          echo 'docker compose "$@"' >> /tmp/bin/docker-compose
          chmod +x /tmp/bin/docker-compose
          echo "/tmp/bin" >> $GITHUB_PATH
      - name: Run Shakedown Test and Capture Results
        id: shakedown_results
        run: |
          SHAKEDOWN_OUTPUT=$(docker compose down && docker compose build && docker compose up -d && ./scripts/shakedown_test.sh || true)
          echo "$SHAKEDOWN_OUTPUT"
          RESULTS=$(echo "$SHAKEDOWN_OUTPUT" | grep -E 'PASSED|FAILED')
          # Use multi-line syntax to safely write to GITHUB_OUTPUT
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$RESULTS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
  backend_unit_tests:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      coverage: ${{ steps.backend_tests.outputs.coverage}}
      passed: ${{ steps.backend_tests.outputs.passed }}
      failed: ${{ steps.backend_tests.outputs.failed }}
      warning: ${{ steps.backend_tests.outputs.warning }}
    steps:
      - uses: actions/checkout@v4
      - name: Bring up Docker Compose
        run: docker compose up -d
      - name: Run Backend Unit Tests and Capture Results
        id: backend_tests
        run: |
          TEST_OUTPUT=$(docker compose exec backend bash -c "PYTHONPATH=/app pytest --cov=. --cov-report=term-missing --disable-warnings || true") # Added --disable-warnings and || true
          echo "$TEST_OUTPUT"
          COVERAGE=$(echo "$TEST_OUTPUT" | grep -E "^TOTAL" | awk '{print $4}' || true)
          PASSED=$(echo "$TEST_OUTPUT" | grep -oP '(\d+) passed' | grep -oP '\d+' || true)
          FAILED=$(echo "$TEST_OUTPUT" | grep -oP '(\d+) failed' | grep -oP '\d+' || true)
          WARNING=$(echo "$TEST_OUTPUT" | grep -E "passed.*warning" | grep -oE "[0-9]+ warning" | awk '{print $1}' || true)

          echo "coverage=${COVERAGE:-0}" >> $GITHUB_OUTPUT
          echo "passed=${PASSED:-0}" >> $GITHUB_OUTPUT
          echo "failed=${FAILED:-0}" >> $GITHUB_OUTPUT
          echo "warning=${WARNING:-0}" >> $GITHUB_OUTPUT

  frontend_unit_tests:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      summary: ${{ steps.tests.outputs.summary }}
    steps:
      - uses: actions/checkout@v4

      - name: Bring up Docker Compose
        run: docker compose up -d

      - name: Run Frontend Unit Tests
        id: tests
        run: |
          # Run Django tests inside frontend container and save output
          FULL_OUTPUT=$(docker compose exec -T frontend python manage.py test 2>&1)
          echo "$FULL_OUTPUT"

          # Extract only relevant test information, excluding database creation/destruction messages
          SUMMARY=$(echo "$FULL_OUTPUT" | grep -v -E "(Creating test database|Destroying test database|Uploading file:|Operations to perform|Applying|Unapplying)" | grep -E "(Found [0-9]+ test|System check identified|^[\.EF]+$|Ran [0-9]+ tests in|^OK$|^FAILED|ERROR:|FAIL:)")

          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  integration_tests:
    needs: build
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD || 'test_password_ci_only' }}
          POSTGRES_DB: test_social_app
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    outputs:
      backend_integration_summary: ${{ steps.backend_integration.outputs.summary }}
      frontend_integration_summary: ${{ steps.frontend_integration.outputs.summary }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install Backend Dependencies
        run: |
          pip install -r backend/requirements.txt

      - name: Run Backend Integration Tests
        id: backend_integration
        env:
          DATABASE_URL: postgresql://postgres:${{ secrets.POSTGRES_PASSWORD || 'test_password_ci_only' }}@localhost:5432/test_social_app
        run: |
          cd backend
          INTEGRATION_OUTPUT=$(python -m pytest tests/integration/ -v -m integration --tb=short || true)
          echo "$INTEGRATION_OUTPUT"
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$INTEGRATION_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Install Frontend Dependencies
        run: |
          pip install -r frontend/requirements.txt

      - name: Run Frontend Integration Tests
        id: frontend_integration
        env:
          DJANGO_SETTINGS_MODULE: social.settings
        run: |
          cd frontend
          INTEGRATION_OUTPUT=$(python -m pytest tests/integration/ -v -m integration --tb=short || true)
          echo "$INTEGRATION_OUTPUT"
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$INTEGRATION_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  contract_tests:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      contract_summary: ${{ steps.contract_tests.outputs.summary }}
      api_docs_summary: ${{ steps.api_docs.outputs.summary }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install Backend Dependencies
        run: |
          pip install -r backend/requirements.txt

      - name: Run Contract Tests
        id: contract_tests
        run: |
          cd backend
          CONTRACT_OUTPUT=$(python -m pytest tests/contract/test_api_contract.py -v -m contract --tb=short || true)
          echo "$CONTRACT_OUTPUT"
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$CONTRACT_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Run API Documentation Tests
        id: api_docs
        run: |
          cd backend
          API_DOCS_OUTPUT=$(python -m pytest tests/contract/test_api_documentation.py -v --tb=short || true)
          echo "$API_DOCS_OUTPUT"
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$API_DOCS_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  ui_tests:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      ui_summary: ${{ steps.ui_tests.outputs.summary }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install Frontend Dependencies
        run: |
          pip install -r frontend/requirements.txt

      - name: Install Playwright
        run: |
          pip install playwright pytest-playwright
          playwright install chromium --with-deps

      - name: Run UI Tests
        id: ui_tests
        env:
          DJANGO_SETTINGS_MODULE: social.settings
        run: |
          cd frontend
          UI_OUTPUT=$(python -m pytest tests/ui/ -v -m ui --tb=short || true)
          echo "$UI_OUTPUT"
          # Extract meaningful summary
          UI_SUMMARY=$(echo "$UI_OUTPUT" | grep -E "(PASSED|FAILED|ERROR|\d+ passed|\d+ failed)" | tail -10)
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$UI_SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  performance_tests:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      performance_summary: ${{ steps.performance.outputs.summary }}
    steps:
      - uses: actions/checkout@v4
      - name: Install K6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Validate Performance Test Scripts
        id: performance
        run: |
          # Validate K6 scripts syntax without running actual tests
          echo "Validating load test script..."
          LOAD_VALIDATION=$(k6 inspect tests/performance/load_test.js 2>&1 || echo "validation_error")
          echo "$LOAD_VALIDATION"

          echo "Validating stress test script..."
          STRESS_VALIDATION=$(k6 inspect tests/performance/stress_test.js 2>&1 || echo "validation_error")
          echo "$STRESS_VALIDATION"

          # Check for validation errors
          LOAD_STATUS="VALID"
          STRESS_STATUS="VALID"

          if echo "$LOAD_VALIDATION" | grep -qi "error\|invalid\|validation_error"; then
            LOAD_STATUS="INVALID"
          fi

          if echo "$STRESS_VALIDATION" | grep -qi "error\|invalid\|validation_error"; then
            STRESS_STATUS="INVALID"
          fi

          # Create summary of validation results
          PERF_SUMMARY="Performance test scripts validation:"
          PERF_SUMMARY="$PERF_SUMMARY\n✓ Load test script: $LOAD_STATUS"
          PERF_SUMMARY="$PERF_SUMMARY\n✓ Stress test script: $STRESS_STATUS"
          PERF_SUMMARY="$PERF_SUMMARY\n📝 Note: Full performance testing requires live services (validated syntax only)"

          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo -e "$PERF_SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  enhanced_security_analysis:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      bandit_summary: ${{ steps.security_scan.outputs.bandit_summary }}
      safety_summary: ${{ steps.security_scan.outputs.safety_summary }}
      pylint_summary: ${{ steps.security_scan.outputs.pylint_summary }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install Backend Dependencies
        run: |
          pip install -r backend/requirements.txt

      - name: Run Enhanced Security Analysis
        id: security_scan
        run: |
          cd backend

          # Backend Security Scan
          BANDIT_OUTPUT=$(bandit -r . -f txt || true)
          echo "$BANDIT_OUTPUT"
          BANDIT_SUMMARY=$(echo "$BANDIT_OUTPUT" | grep -E "(Total issues|Severity|Confidence)" | head -5)
          echo "bandit_summary<<EOF" >> $GITHUB_OUTPUT
          echo "$BANDIT_SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Dependency Security Check
          SAFETY_OUTPUT=$(safety check --short-report 2>&1 | grep -v -E "(DEPRECATED|this command|We highly encourage)" || true)
          echo "$SAFETY_OUTPUT"
          echo "safety_summary<<EOF" >> $GITHUB_OUTPUT
          echo "$SAFETY_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Code Quality Analysis
          PYLINT_OUTPUT=$(pylint app.py models.py --score=y || true)
          PYLINT_SUMMARY=$(echo "$PYLINT_OUTPUT" | grep -E "(rated|Your code)" | tail -2)
          echo "pylint_summary<<EOF" >> $GITHUB_OUTPUT
          echo "$PYLINT_SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  report_pr_comment:
    needs: [static_analysis, dependency_scan, container_scan, shakedown_test, backend_unit_tests, frontend_unit_tests, integration_tests, contract_tests, ui_tests, performance_tests, enhanced_security_analysis, gemini_review]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Generate PR Comment
        id: generate_comment
        run: |
          # --- Backend Unit Tests ---
          BACKEND_TESTS_COVERAGE="${{ needs.backend_unit_tests.outputs.coverage }}"
          BACKEND_TESTS_PASSED="${{ needs.backend_unit_tests.outputs.passed }}"
          BACKEND_TESTS_FAILED="${{ needs.backend_unit_tests.outputs.failed }}"
          BACKEND_TESTS_WARNING="${{ needs.backend_unit_tests.outputs.warning }}"

          # --- Frontend Unit Tests ---
          FRONTEND_SUMMARY="${{ needs.frontend_unit_tests.outputs.summary }}"


          # --- Static Analysis (Flake8) ---
          BACKEND_FLAKE8_ERRORS="${{ needs.static_analysis.outputs.backend_flake8_errors }}"
          BACKEND_FLAKE8_WARNINGS="${{ needs.static_analysis.outputs.backend_flake8_warnings }}"
          FRONTEND_FLAKE8_ERRORS="${{ needs.static_analysis.outputs.frontend_flake8_errors }}"
          FRONTEND_FLAKE8_WARNINGS="${{ needs.static_analysis.outputs.frontend_flake8_warnings }}"

          # --- Dependency Scan (Safety) ---
          FRONTEND_SAFETY_SUMMARY="${{ needs.dependency_scan.outputs.frontend_safety_summary }}"
          BACKEND_SAFETY_SUMMARY="${{ needs.dependency_scan.outputs.backend_safety_summary }}"

          # --- Container Scan (Trivy) ---
          BACKEND_TRIVY_CRITICAL="${{ needs.container_scan.outputs.parse_backend_trivy_critical }}"
          BACKEND_TRIVY_HIGH="${{ needs.container_scan.outputs.parse_backend_trivy_high }}"
          BACKEND_TRIVY_MEDIUM="${{ needs.container_scan.outputs.parse_backend_trivy_medium }}"
          FRONTEND_TRIVY_CRITICAL="${{ needs.container_scan.outputs.parse_frontend_trivy_critical }}"
          FRONTEND_TRIVY_HIGH="${{ needs.container_scan.outputs.parse_frontend_trivy_high }}"
          FRONTEND_TRIVY_MEDIUM="${{ needs.container_scan.outputs.parse_frontend_trivy_medium }}"

          # --- Shakedown Test ---
          SHAKEDOWN_SUMMARY="${{ needs.shakedown_test.outputs.summary }}"

          # --- Integration Tests ---
          BACKEND_INTEGRATION_SUMMARY="${{ needs.integration_tests.outputs.backend_integration_summary }}"
          FRONTEND_INTEGRATION_SUMMARY="${{ needs.integration_tests.outputs.frontend_integration_summary }}"

          # --- Contract Tests ---
          CONTRACT_SUMMARY="${{ needs.contract_tests.outputs.contract_summary }}"
          API_DOCS_SUMMARY="${{ needs.contract_tests.outputs.api_docs_summary }}"

          # --- UI Tests ---
          UI_SUMMARY="${{ needs.ui_tests.outputs.ui_summary }}"

          # --- Performance Tests ---
          PERFORMANCE_SUMMARY="${{ needs.performance_tests.outputs.performance_summary }}"

          # --- Enhanced Security ---
          BANDIT_SUMMARY="${{ needs.enhanced_security_analysis.outputs.bandit_summary }}"
          ENHANCED_SAFETY_SUMMARY="${{ needs.enhanced_security_analysis.outputs.safety_summary }}"
          PYLINT_SUMMARY="${{ needs.enhanced_security_analysis.outputs.pylint_summary }}"

          # --- Gemini Review ---
          GEMINI_REVIEW_SUMMARY="${{ needs.gemini_review.outputs.summary }}"

          # write multi-line output safely using a literal block
          {
            echo "pr_comment<<PR_COMMENT_DELIMITER"
            echo "### 🚀 Agile Test Pyramid CI/CD Results"
            echo ""
            echo "#### 📊 Backend Unit Tests (Base Layer)"
            echo "* Coverage: ${BACKEND_TESTS_COVERAGE}"
            echo "* Passed: ${BACKEND_TESTS_PASSED}"
            echo "* Failed: ${BACKEND_TESTS_FAILED}"
            echo "* Warnings: ${BACKEND_TESTS_WARNING}"
            echo ""
            echo "#### 📱 Frontend Unit Tests (Base Layer)"
            echo '```'
            echo "${FRONTEND_SUMMARY}"
            echo '```'
            echo ""
            echo "#### 🔧 Integration Tests (Layer 2)"
            echo "**Backend Integration:**"
            echo '```'
            echo "${BACKEND_INTEGRATION_SUMMARY}"
            echo '```'
            echo "**Frontend Integration:**"
            echo '```'
            echo "${FRONTEND_INTEGRATION_SUMMARY}"
            echo '```'
            echo ""
            echo "#### 🤝 Contract Tests (Layer 3)"
            echo "**API Contracts:**"
            echo '```'
            echo "${CONTRACT_SUMMARY}"
            echo '```'
            echo "**API Documentation:**"
            echo '```'
            echo "${API_DOCS_SUMMARY}"
            echo '```'
            echo ""
            echo "#### 🎭 UI Functional Tests (Layer 4)"
            echo '```'
            echo "${UI_SUMMARY}"
            echo '```'
            echo ""
            echo "#### ⚡ Performance Tests (Layer 5)"
            echo '```'
            echo "${PERFORMANCE_SUMMARY}"
            echo '```'
            echo ""
            echo "#### 🛡️ Enhanced Security Analysis (Layer 6)"
            echo "**Bandit Security Scan:**"
            echo '```'
            echo "${BANDIT_SUMMARY}"
            echo '```'
            echo "**Dependency Safety Check:**"
            echo '```'
            echo "${ENHANCED_SAFETY_SUMMARY}"
            echo '```'
            echo "**Pylint Code Quality:**"
            echo '```'
            echo "${PYLINT_SUMMARY}"
            echo '```'
            echo ""
            echo "#### 📈 Static Analysis (Flake8)"
            echo "* Backend: Errors: ${BACKEND_FLAKE8_ERRORS}, Warnings: ${BACKEND_FLAKE8_WARNINGS}"
            echo "* Frontend: Errors: ${FRONTEND_FLAKE8_ERRORS}, Warnings: ${FRONTEND_FLAKE8_WARNINGS}"
            echo ""
            echo "#### 🔍 Legacy Security Scans"
            echo "**Dependency Scan (Safety):**"
            echo "Front End: ${FRONTEND_SAFETY_SUMMARY}"
            echo "Backend: ${BACKEND_SAFETY_SUMMARY}"
            echo ""
            echo "**Container Scan (Trivy):**"
            echo "| Image    | Critical | High | Medium |"
            echo "|----------|----------|------|--------|"
            echo "| Backend  | ${BACKEND_TRIVY_CRITICAL} | ${BACKEND_TRIVY_HIGH} | ${BACKEND_TRIVY_MEDIUM} |"
            echo "| Frontend | ${FRONTEND_TRIVY_CRITICAL} | ${FRONTEND_TRIVY_HIGH} | ${FRONTEND_TRIVY_MEDIUM} |"
            echo ""
            echo "#### 🧪 Shakedown Test"
            echo '```'
            echo "${SHAKEDOWN_SUMMARY}"
            echo '```'
            echo ""
            echo "#### 🤖 AI Review"
            echo '```'
            echo "${GEMINI_REVIEW_SUMMARY}" | base64 --decode
            echo '```'
            echo "PR_COMMENT_DELIMITER"
          } >> $GITHUB_OUTPUT

      - name: Post PR Comment
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{ steps.generate_comment.outputs.pr_comment }}

  gemini_review:
    needs: [static_analysis, dependency_scan, container_scan, shakedown_test, backend_unit_tests, frontend_unit_tests]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    outputs:
      summary: ${{ steps.gemini_review_step.outputs.summary }}
    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      PROMPT_TEMPLATE: |
        Strictly using the provided "Pull Request Diff" and nothing else, provide a human-understandable overview of the changes. Then, analyze the provided "Test Results" and give a clear recommendation on whether to merge the pull request.

        ## Pull Request Diff
        ```diff
        %s
        ```

        ## Test Results

        ### Backend Unit Tests
        * Coverage: %s
        * Passed: %s
        * Failed: %s
        * Warnings: %s

        ### Frontend Unit Tests
        ```
        %s
        ```

        ### Static Analysis (Flake8)
        * Backend: Errors: %s, Warnings: %s
        * Frontend: Errors: %s, Warnings: %s

        ### Dependency Scan (Safety)
        Front End Safety: %s
        Backend Safety: %s

        ### Container Scan (Trivy)
        | Image    | Critical | High | Medium |
        |----------|----------|------|--------|
        | Backend  | %s | %s | %s |
        | Frontend | %s | %s | %s |

        ### Shakedown Test
        ```
        %s
        ```

        Based on the above, provide a concise summary and a clear merge recommendation (e.g., 'Merge', 'Do Not Merge', 'Merge with Cautions').
    steps:
      - uses: actions/checkout@v4
      - name: Debug GEMINI_API_KEY
        run: echo "Key length is ${#GEMINI_API_KEY}"   # should print a nonzero number
      - name: Install gemini-cli
        run: |
          npm cache clean --force
          npm install -g @google/gemini-cli
      - name: Generate Gemini Review
        id: gemini_review_step
        run: |
          # Download PR diff to file to avoid argument length limits
          curl -L ${{ github.event.pull_request.diff_url }} > pr_diff.txt

          # --- Prompt 1: Generate Change Summary ---
          cat > summary_prompt.txt <<EOT
          Strictly using the provided "Pull Request Diff" and nothing else, provide a human-understandable overview of the changes.
          ## Pull Request Diff
          \`\`\`diff
          $(head -c 50000 pr_diff.txt)...
          (diff truncated for brevity)
          \`\`\`
          EOT

          CHANGE_SUMMARY=$(gemini < summary_prompt.txt)

          # --- Prompt 2: Generate Analysis and Recommendation ---
          # Collect all outputs from previous jobs
          BACKEND_TESTS_COVERAGE="${{ needs.backend_unit_tests.outputs.coverage }}"
          BACKEND_TESTS_PASSED="${{ needs.backend_unit_tests.outputs.passed }}"
          BACKEND_TESTS_FAILED="${{ needs.backend_unit_tests.outputs.failed }}"
          BACKEND_TESTS_WARNING="${{ needs.backend_unit_tests.outputs.warning }}"
          FRONTEND_SUMMARY="${{ needs.frontend_unit_tests.outputs.summary }}"
          BACKEND_FLAKE8_ERRORS="${{ needs.static_analysis.outputs.backend_flake8_errors }}"
          BACKEND_FLAKE8_WARNINGS="${{ needs.static_analysis.outputs.backend_flake8_warnings }}"
          FRONTEND_FLAKE8_ERRORS="${{ needs.static_analysis.outputs.frontend_flake8_errors }}"
          FRONTEND_FLAKE8_WARNINGS="${{ needs.static_analysis.outputs.frontend_flake8_warnings }}"
          FRONTEND_SAFETY_SUMMARY="${{ needs.dependency_scan.outputs.frontend_safety_summary }}"
          BACKEND_SAFETY_SUMMARY="${{ needs.dependency_scan.outputs.backend_safety_summary }}"
          BACKEND_TRIVY_CRITICAL="${{ needs.container_scan.outputs.parse_backend_trivy_critical }}"
          BACKEND_TRIVY_HIGH="${{ needs.container_scan.outputs.parse_backend_trivy_high }}"
          BACKEND_TRIVY_MEDIUM="${{ needs.container_scan.outputs.parse_backend_trivy_medium }}"
          FRONTEND_TRIVY_CRITICAL="${{ needs.container_scan.outputs.parse_frontend_trivy_critical }}"
          FRONTEND_TRIVY_HIGH="${{ needs.container_scan.outputs.parse_frontend_trivy_high }}"
          FRONTEND_TRIVY_MEDIUM="${{ needs.container_scan.outputs.parse_frontend_trivy_medium }}"
          SHAKEDOWN_SUMMARY="${{ needs.shakedown_test.outputs.summary }}"

          # --- Prompt 2: Generate Analysis and Recommendation ---
          cat > analysis_prompt.txt <<EOT
          You are a senior software engineer reviewing a pull request.
          First, here is the summary of changes in the pull request:
          $CHANGE_SUMMARY

          Next, here are the results from the automated test pipeline:
          ## Test Results
          ### Backend Unit Tests
          * Coverage: $BACKEND_TESTS_COVERAGE
          * Passed: $BACKEND_TESTS_PASSED
          * Failed: $BACKEND_TESTS_FAILED
          * Warnings: $BACKEND_TESTS_WARNING

          ### Frontend Unit Tests
          \`\`\`
          $FRONTEND_SUMMARY
          \`\`\`

          ### Static Analysis (Flake8)
          * Backend: Errors: $BACKEND_FLAKE8_ERRORS, Warnings: $BACKEND_FLAKE8_WARNINGS
          * Frontend: Errors: $FRONTEND_FLAKE8_ERRORS, Warnings: $FRONTEND_FLAKE8_WARNINGS

          ### Dependency Scan (Safety)
          Front End Safety: $FRONTEND_SAFETY_SUMMARY
          Backend Safety: $BACKEND_SAFETY_SUMMARY

          ### Container Scan (Trivy)
          | Image    | Critical | High | Medium |
          |----------|----------|------|--------|
          | Backend  | $BACKEND_TRIVY_CRITICAL | $BACKEND_TRIVY_HIGH | $BACKEND_TRIVY_MEDIUM |
          | Frontend | $FRONTEND_TRIVY_CRITICAL | $FRONTEND_TRIVY_HIGH | $FRONTEND_TRIVY_MEDIUM |

          ### Shakedown Test
          \`\`\`
          $SHAKEDOWN_SUMMARY
          \`\`\`

          Based on the change summary and the test results, provide a concise analysis of the test results and a clear merge recommendation (e.g., 'Merge', 'Do Not Merge', 'Merge with Cautions').
          EOT

          ANALYSIS_AND_RECOMMENDATION=$(gemini < analysis_prompt.txt)

          # --- Combine and Output ---
          OUTPUT="$CHANGE_SUMMARY\n\n$ANALYSIS_AND_RECOMMENDATION"

          echo "$OUTPUT" # Debug

          ENCODED_OUTPUT=$(echo "$OUTPUT" | base64 -w 0)
          cat <<ENCODED_OUTPUT >> $GITHUB_OUTPUT
          summary<<EOF
          $ENCODED_OUTPUT
          EOF
          ENCODED_OUTPUT
