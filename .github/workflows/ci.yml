name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - main

permissions:
  contents: read
  pull-requests: write
  issues: write


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker Images
        run: docker compose build

  static_analysis:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Use Python 3.9 as per Dockerfiles
      - name: Install Backend Dependencies
        run: pip install -r backend/requirements.txt
      - name: Run Backend Static Analysis (Flake8) and Capture Results
        id: backend_flake8
        run: |
          set -x
          pip install flake8
          FLAKE8_OUTPUT=$(flake8 backend/ --config=backend/.flake8 --exit-zero || true) # Added || true
          echo "$FLAKE8_OUTPUT"
          ERRORS=$(echo "$FLAKE8_OUTPUT" | grep -c 'E[0-9]{3}' || true)
          WARNINGS=$(echo "$FLAKE8_OUTPUT" | grep -c 'W[0-9]{3}' || true)
          echo "errors=${ERRORS}" >> $GITHUB_OUTPUT
          echo "warnings=${WARNINGS}" >> $GITHUB_OUTPUT
      - name: Install Frontend Dependencies
        run: pip install -r frontend/requirements.txt
      - name: Run Frontend Static Analysis (Flake8) and Capture Results
        id: frontend_flake8
        run: |
          set -x
          pip install flake8
          FLAKE8_OUTPUT=$(flake8 frontend --config=frontend/.flake8 --exit-zero || true) # Added || true
          echo "$FLAKE8_OUTPUT"
          ERRORS=$(echo "$FLAKE8_OUTPUT" | grep -c 'E[0-9]{3}' || true)
          WARNINGS=$(echo "$FLAKE8_OUTPUT" | grep -c 'W[0-9]{3}' || true)
          echo "errors=${ERRORS}" >> $GITHUB_OUTPUT
          echo "warnings=${WARNINGS}" >> $GITHUB_OUTPUT
      - name: Run Django System Checks
        run: python frontend/manage.py check

  dependency_scan:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Install Safety
        run: pip install safety
      - name: Run Backend Dependency Scan and Capture Results
        id: backend_safety
        run: |
          SAFETY_OUTPUT=$(safety check -r backend/requirements.txt --json || true) # Use || true to prevent job failure on vulnerabilities
          echo "$SAFETY_OUTPUT"
          CRITICAL=$(echo "$SAFETY_OUTPUT" | jq '.[] | select(.severity == "critical")' | wc -l)
          HIGH=$(echo "$SAFETY_OUTPUT" | jq '.[] | select(.severity == "high")' | wc -l)
          MEDIUM=$(echo "$SAFETY_OUTPUT" | jq '.[] | select(.severity == "medium")' | wc -l)
          echo "critical=${CRITICAL}" >> $GITHUB_OUTPUT
          echo "high=${HIGH}" >> $GITHUB_OUTPUT
          echo "medium=${MEDIUM}" >> $GITHUB_OUTPUT
      - name: Run Frontend Dependency Scan and Capture Results
        id: frontend_safety
        run: |
          SAFETY_OUTPUT=$(safety check -r frontend/requirements.txt --json || true) # Use || true to prevent job failure on vulnerabilities
          echo "$SAFETY_OUTPUT"
          CRITICAL=$(echo "$SAFETY_OUTPUT" | jq '.[] | select(.severity == "critical")' | wc -l)
          HIGH=$(echo "$SAFETY_OUTPUT" | jq '.[] | select(.severity == "high")' | wc -l)
          MEDIUM=$(echo "$SAFETY_OUTPUT" | jq '.[] | select(.severity == "medium")' | wc -l)
          echo "critical=${CRITICAL}" >> $GITHUB_OUTPUT
          echo "high=${HIGH}" >> $GITHUB_OUTPUT
          echo "medium=${MEDIUM}" >> $GITHUB_OUTPUT

  container_scan:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build Backend Docker Image
        run: docker build -t social-backend:latest ./backend
      - name: Build Frontend Docker Image
        run: docker build -t social-frontend:latest ./frontend
      - name: List Docker Images
        run: docker images
      - name: Run Trivy Scan on Backend Image and Capture Results
        id: backend_trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'social-backend:latest'
          format: 'json'
          exit-code: '1'
          severity: 'CRITICAL'
          ignore-unfixed: true
          output: 'trivy-backend-results.json'
      - name: Parse Backend Trivy Results
        id: parse_backend_trivy
        run: |
          CRITICAL=$(jq '.Results[].Vulnerabilities[] | select(.Severity == "CRITICAL")' trivy-backend-results.json | wc -l)
          HIGH=$(jq '.Results[].Vulnerabilities[] | select(.Severity == "HIGH")' trivy-backend-results.json | wc -l)
          MEDIUM=$(jq '.Results[].Vulnerabilities[] | select(.Severity == "MEDIUM")' trivy-backend-results.json | wc -l)
          echo "critical=${CRITICAL}" >> $GITHUB_OUTPUT
          echo "high=${HIGH}" >> $GITHUB_OUTPUT
          echo "medium=${MEDIUM}" >> $GITHUB_OUTPUT
      - name: Run Trivy Scan on Frontend Image and Capture Results
        id: frontend_trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'social-frontend:latest'
          format: 'json'
          exit-code: '1'
          severity: 'CRITICAL'
          ignore-unfixed: true
          output: 'trivy-frontend-results.json'
      - name: Parse Frontend Trivy Results
        id: parse_frontend_trivy
        run: |
          CRITICAL=$(jq '.Results[].Vulnerabilities[] | select(.Severity == "CRITICAL")' trivy-frontend-results.json | wc -l)
          HIGH=$(jq '.Results[].Vulnerabilities[] | select(.Severity == "HIGH")' trivy-frontend-results.json | wc -l)
          MEDIUM=$(jq '.Results[].Vulnerabilities[] | select(.Severity == "MEDIUM")' trivy-frontend-results.json | wc -l)
          echo "critical=${CRITICAL}" >> $GITHUB_OUTPUT
          echo "high=${HIGH}" >> $GITHUB_OUTPUT
          echo "medium=${MEDIUM}" >> $GITHUB_OUTPUT

  shakedown_test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create docker-compose wrapper
        run: |
          mkdir -p /tmp/bin
          echo '#!/bin/bash' > /tmp/bin/docker-compose
          echo 'docker compose "$@"' >> /tmp/bin/docker-compose
          chmod +x /tmp/bin/docker-compose
          echo "/tmp/bin" >> $GITHUB_PATH
      - name: Run Shakedown Test and Capture Results
        id: shakedown_results
        run: |
          SHAKEDOWN_OUTPUT=$(docker compose down && docker compose build && docker compose up -d && ./scripts/shakedown_test.sh || true)
          echo "$SHAKEDOWN_OUTPUT"
          RESULTS=$(echo "$SHAKEDOWN_OUTPUT" | grep -E 'PASSED|FAILED')
          # Use multi-line syntax to safely write to GITHUB_OUTPUT
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$RESULTS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
  backend_unit_tests:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Bring up Docker Compose
        run: docker compose up -d
      - name: Run Backend Unit Tests and Capture Results
        id: backend_tests
        run: |
          TEST_OUTPUT=$(docker compose exec backend bash -c "PYTHONPATH=/app pytest --cov=. --cov-report=term-missing --disable-warnings || true") # Added --disable-warnings and || true
          echo "$TEST_OUTPUT"
          TOTAL_RAN=$(echo "$TEST_OUTPUT" | grep -oP 'collected \K\\d+' | head -1 || true)
          PASSED=$(echo "$TEST_OUTPUT" | grep -oP '(\d+) passed' | grep -oP '\d+' || true)
          FAILED=$(echo "$TEST_OUTPUT" | grep -oP '(\d+) failed' | grep -oP '\d+' || true)
          SKIPPED=$(echo "$TEST_OUTPUT" | grep -oP '(\d+) skipped' | grep -oP '\d+' || true)

          echo "total_ran=${TOTAL_RAN:-0}" >> $GITHUB_OUTPUT
          echo "passed=${PASSED:-0}" >> $GITHUB_OUTPUT
          echo "failed=${FAILED:-0}" >> $GITHUB_OUTPUT
          echo "skipped=${SKIPPED:-0}" >> $GITHUB_OUTPUT

  frontend_unit_tests:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      total_ran: ${{ steps.tests.outputs.total_ran }}
      passed: ${{ steps.tests.outputs.passed }}
      failed: ${{ steps.tests.outputs.failed }}
    steps:
      - uses: actions/checkout@v4

      - name: Bring up Docker Compose
        run: docker compose up -d

      - name: Run Frontend Unit Tests
        id: tests
        run: |
          # Run Django tests inside frontend container and save output
          TEST_OUTPUT=$(docker compose exec -T frontend python manage.py test --verbosity=2 || true)
          echo "$TEST_OUTPUT"

          # Parse the test results using regex
          # Example Django summary: "Ran 10 tests in 0.123s\n\nOK" or "FAILED (failures=1, errors=0)"
          TOTAL=$(echo "$TEST_OUTPUT" | grep -Eo 'Ran [0-9]+ tests?' | awk '{print $2}')
          PASSED=""
          FAILED=""
          if echo "$TEST_OUTPUT" | grep -q "OK"; then
            PASSED="$TOTAL"
            FAILED=0
          else
            # extract failures and errors
            FAILURES=$(echo "$TEST_OUTPUT" | grep -Eo 'failures=[0-9]+' | awk -F= '{print $2}')
            ERRORS=$(echo "$TEST_OUTPUT" | grep -Eo 'errors=[0-9]+' | awk -F= '{print $2}')
            FAILURES=${FAILURES:-0}
            ERRORS=${ERRORS:-0}
            FAILED=$((FAILURES + ERRORS))
            PASSED=$((TOTAL - FAILED))
          fi

          echo "Total tests ran: $TOTAL"
          echo "Passed: $PASSED"
          echo "Failed: $FAILED"

          # Set outputs for later jobs
          echo "total_ran=$TOTAL" >> $GITHUB_OUTPUT
          echo "passed=$PASSED" >> $GITHUB_OUTPUT
          echo "failed=$FAILED" >> $GITHUB_OUTPUT

  report_pr_comment:
    needs: [static_analysis, dependency_scan, container_scan, shakedown_test, backend_unit_tests, frontend_unit_tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Generate PR Comment
        id: generate_comment
        run: |
          # --- Backend Unit Tests ---
          BACKEND_TESTS_TOTAL_RAN="${{ needs.backend_unit_tests.outputs.total_ran }}"
          BACKEND_TESTS_PASSED="${{ needs.backend_unit_tests.outputs.passed }}"
          BACKEND_TESTS_FAILED="${{ needs.backend_unit_tests.outputs.failed }}"
          BACKEND_TESTS_SKIPPED="${{ needs.backend_unit_tests.outputs.skipped }}"

          # --- Frontend Unit Tests ---
          FRONTEND_TESTS_TOTAL_RAN="${{ needs.frontend_unit_tests.outputs.total_ran }}"
          FRONTEND_TESTS_PASSED="${{ needs.frontend_unit_tests.outputs.passed }}"
          FRONTEND_TESTS_FAILED="${{ needs.frontend_unit_tests.outputs.failed }}"

          # --- Static Analysis (Flake8) ---
          BACKEND_FLAKE8_ERRORS="${{ needs.static_analysis.outputs.backend_flake8_errors }}"
          BACKEND_FLAKE8_WARNINGS="${{ needs.static_analysis.outputs.backend_flake8_warnings }}"
          FRONTEND_FLAKE8_ERRORS="${{ needs.static_analysis.outputs.frontend_flake8_errors }}"
          FRONTEND_FLAKE8_WARNINGS="${{ needs.static_analysis.outputs.frontend_flake8_warnings }}"

          # --- Dependency Scan (Safety) ---
          BACKEND_SAFETY_CRITICAL="${{ needs.dependency_scan.outputs.backend_safety_critical }}"
          BACKEND_SAFETY_HIGH="${{ needs.dependency_scan.outputs.backend_safety_high }}"
          BACKEND_SAFETY_MEDIUM="${{ needs.dependency_scan.outputs.backend_safety_medium }}"
          FRONTEND_SAFETY_CRITICAL="${{ needs.dependency_scan.outputs.frontend_safety_critical }}"
          FRONTEND_SAFETY_HIGH="${{ needs.dependency_scan.outputs.frontend_safety_high }}"
          FRONTEND_SAFETY_MEDIUM="${{ needs.dependency_scan.outputs.frontend_safety_medium }}"

          # --- Container Scan (Trivy) ---
          BACKEND_TRIVY_CRITICAL="${{ needs.container_scan.outputs.parse_backend_trivy_critical }}"
          BACKEND_TRIVY_HIGH="${{ needs.container_scan.outputs.parse_backend_trivy_high }}"
          BACKEND_TRIVY_MEDIUM="${{ needs.container_scan.outputs.parse_backend_trivy_medium }}"
          FRONTEND_TRIVY_CRITICAL="${{ needs.container_scan.outputs.parse_frontend_trivy_critical }}"
          FRONTEND_TRIVY_HIGH="${{ needs.container_scan.outputs.parse_frontend_trivy_high }}"
          FRONTEND_TRIVY_MEDIUM="${{ needs.container_scan.outputs.parse_frontend_trivy_medium }}"

          # --- Shakedown Test ---
          SHAKEDOWN_SUMMARY="${{ needs.shakedown_test.outputs.summary }}"

          # write multi-line output safely using a literal block
          {
            echo "pr_comment<<EOF"
            echo "### CI/CD Pipeline Results"
            echo ""
            echo "#### Backend Unit Tests"
            echo "* Total: ${BACKEND_TESTS_TOTAL_RAN}"
            echo "* Passed: ${BACKEND_TESTS_PASSED}"
            echo "* Failed: ${BACKEND_TESTS_FAILED}"
            echo "* Skipped: ${BACKEND_TESTS_SKIPPED}"
            echo ""
            echo "#### Frontend Unit Tests"
            echo "* Total: ${FRONTEND_TESTS_TOTAL_RAN}"
            echo "* Passed: ${FRONTEND_TESTS_PASSED}"
            echo "* Failed: ${FRONTEND_TESTS_FAILED}"
            echo ""
            echo "echo #### Static Analysis (Flake8)"
            echo "* Backend: Errors: ${BACKEND_FLAKE8_ERRORS}, Warnings: ${BACKEND_FLAKE8_WARNINGS}"
            echo "* Frontend: Errors: ${FRONTEND_FLAKE8_ERRORS}, Warnings: ${FRONTEND_FLAKE8_WARNINGS}"
            echo ""
            echo "#### Dependency Scan (Safety)"
            echo "| Module   | Critical | High | Medium |"
            echo "|----------|----------|------|--------|"
            echo "| Backend  | ${BACKEND_SAFETY_CRITICAL} | ${BACKEND_SAFETY_HIGH} | ${BACKEND_SAFETY_MEDIUM} |"
            echo "| Frontend | ${FRONTEND_SAFETY_CRITICAL} | ${FRONTEND_SAFETY_HIGH} | ${FRONTEND_SAFETY_MEDIUM} |"
            echo ""
            echo "#### Container Scan (Trivy)"
            echo "| Image    | Critical | High | Medium |"
            echo "|----------|----------|------|--------|"
            echo "| Backend  | ${BACKEND_TRIVY_CRITICAL} | ${BACKEND_TRIVY_HIGH} | ${BACKEND_TRIVY_MEDIUM} |"
            echo "| Frontend | ${FRONTEND_TRIVY_CRITICAL} | ${FRONTEND_TRIVY_HIGH} | ${FRONTEND_TRIVY_MEDIUM} |"
            echo ""
            echo "#### Shakedown Test"
            echo '```'
            echo "${SHAKEDOWN_SUMMARY}"
            echo '```'
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Post PR Comment
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{ steps.generate_comment.outputs.pr_comment }}
