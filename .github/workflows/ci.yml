name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker Images
        run: docker compose build

  static_analysis:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Use Python 3.9 as per Dockerfiles
      - name: Install Backend Dependencies
        run: pip install -r backend/requirements.txt
      - name: Run Backend Static Analysis (Flake8)
        run: pip install flake8 && flake8 backend/ --config=backend/.flake8
      - name: Install Frontend Dependencies
        run: pip install -r frontend/requirements.txt
      - name: Run Frontend Static Analysis (Flake8)
        run: pip install flake8 && flake8 frontend --config=frontend/.flake8
      - name: Run Django System Checks
        run: python frontend/manage.py check

  dependency_scan:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Install Safety
        run: pip install safety
      - name: Run Backend Dependency Scan
        run: safety check -r backend/requirements.txt
      - name: Run Frontend Dependency Scan
        run: safety check -r frontend/requirements.txt

  container_scan:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build Backend Docker Image
        run: docker build -t social-backend:latest ./backend
      - name: Build Frontend Docker Image
        run: docker build -t social-frontend:latest ./frontend
      - name: List Docker Images
        run: docker images
      - name: Run Trivy Scan on Backend Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'social-backend:latest'
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL'
          ignore-unfixed: true
      - name: Run Trivy Scan on Frontend Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'social-frontend:latest'
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL'
          ignore-unfixed: true

  shakedown_test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create docker-compose wrapper
        run: |
          mkdir -p /tmp/bin
          echo '#!/bin/bash' > /tmp/bin/docker-compose
          echo 'docker compose "$@"' >> /tmp/bin/docker-compose
          chmod +x /tmp/bin/docker-compose
          echo "/tmp/bin" >> $GITHUB_PATH
      - name: Run Shakedown Test
        run: docker compose down && docker compose build && docker compose up -d && ./scripts/shakedown_test.sh

  backend_unit_tests:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Bring up Docker Compose
        run: docker compose up -d
      - name: Run Backend Unit Tests
        run: docker compose exec backend bash -c "PYTHONPATH=/app pytest --cov=. --cov-report=term-missing"

  frontend_unit_tests:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Bring up Docker Compose
        run: docker compose up -d
      - name: Run Frontend Unit Tests
        run: docker compose exec frontend python manage.py test
      # Note: Django's default test runner doesn't easily provide coverage reports in a way that can be directly checked for a threshold in a simple shell command without additional tools.
      # For coverage, you'd typically integrate with a tool like coverage.py and then report it.
      # For now, this will just run the tests and fail if any tests fail.
